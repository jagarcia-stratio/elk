input {
  tcp {
    port => 5000
  }
  twitter {
      ## Get keys from https://apps.twitter.com/
      consumer_key => "xxxxxxxx"
      consumer_secret => "xxxxxxxx"
      oauth_token => "xxxxxxxx"
      oauth_token_secret => "xxxxxxxx"
      keywords => ["technology", "big data","bigdata", "artificialintelligence", "artificial intelligence", "iot", "internetofthings", "internet of things", "machine learning", "machinelearning", "deep learning", "deeplearning", "datascience", "python", "scala", "neural networks", "neuralnetworks", "elasticsearch", "logstash", "kibana", "spark", "blockchain", "cryptocurrency", "bitcoin", "ethereum"]
      full_tweet => true
      tags => ["technology"]
      ## ignore_retweets => true
  }
  twitter {
      ## Get keys from https://apps.twitter.com/
      consumer_key => "xxxxxxxx"
      consumer_secret => "xxxxxxxx"
      oauth_token => "xxxxxxxx"
      oauth_token_secret => "xxxxxxxx"
      use_samples => true
      full_tweet => true
      tags => ["random"]
      ## ignore_retweets => true
  }
  twitter {
      ## Get keys from https://apps.twitter.com/
      consumer_key => "xxxxxxxx"
      consumer_secret => "xxxxxxxx"
      oauth_token => "xxxxxxxx"
      oauth_token_secret => "xxxxxxxx"
      keywords => ["film", "movie", "marvel", "antmanandthewasp", "antman", "thewasp"]
      full_tweet => true
      tags => ["films"]
      ## ignore_retweets => true
  }
  twitter {
      ## Get keys from https://apps.twitter.com/
      consumer_key => "xxxxxxxx"
      consumer_secret => "xxxxxxxx"
      oauth_token => "xxxxxxxx"
      oauth_token_secret => "xxxxxxxx"
      keywords => ["news", "noticia", "noticias", "ニュース"]
      full_tweet => true
      tags => ["news"]
      ## ignore_retweets => true
  }
}

## Add your filters / logstash plugins configuration here

filter {
  mutate {
    add_field => {
     "[topic]" => "%{[tags]}"
    }
  }

  mutate {
     remove_field => ["contributors", "current_user_retweet", "favorited",
     "filter_level", "geo", "id", "possibly_sensitive", "quoted_status_id",
     "quoted_status_id_str", "quoted_status", "scopes", "retweeted", "source",
     "truncated", "withheld_copyright", "withheld_in_countries",
     "withheld_scope"]
  }

  # Retrieves location information
  if ([place]) {

    # If location is a polygon then the center is obtained and stored as location coordinate
    if ([place][bounding_box][type] == 'Polygon'){
      ruby {
        code => '
          longitude = (event.get("[place][bounding_box][coordinates][0][0][0]") + event.get("[place][bounding_box][coordinates][0][2][0]"))/2
          latitude = (event.get("[place][bounding_box][coordinates][0][0][1]") + event.get("[place][bounding_box][coordinates][0][2][1]"))/2
          coordinates = []
            coordinates << longitude
            coordinates << latitude
          event.set("[location][coordinates]", coordinates)
          event.set("[location][mode]", "center")
        '
      }
      # And the coordinated defining the polygon are stored as area coordinates
      mutate {
        rename => {
          "[place][bounding_box][coordinates][0]" => "[location][area]"
        }
      }
    }

    # If location is a point then the first coordinate is used as location coordinate
    else if ([place][bounding_box][type] == 'Pointn'){
      mutate {
        rename => {
          "[place][bounding_box][coordinates][0][0]" => "[location][coordinates]"
        }
        add_field => {
         "[location][mode]" => 'point'
        }
      }
    }

    # This should not occur as only bounding box types regarding twitter API are "Polygon" and "Pointn" but just in case...
    else {
      mutate {
        rename => {
          "[place][bounding_box][coordinates][0][0]" => "[location][coordinates]"
        }
        add_field => {
         "[location][mode]" => "undefined [%{[place][bounding_box][type]}]"
        }
      }
    }

    # Common location fields are renamed and then original field is removed
    mutate {
      rename => {
        "[place][name]" => "[location][name]"
        "[place][country]" => "[location][country]"
        "[place][country_code]" => "[location][country_code]"
      }
    }
  }

  # If tweet has coordinates they are used instead of place ones as they should be more specific
  if ([coordinates]){
    mutate {
      rename => {
        "[coordinates]" => "[location][coordinates]"
      }
      add_field => {
       "[location][mode]" => 'location'
      }
    }
  }

  #If retweeted
  if([retweeted_status]) {
     mutate {
        rename => {
           "[retweeted_status][text]" => "tweet_content"
           "[retweeted_status][id_str]" => "original_tweet_id"
           "[retweeted_status][user][id_str]" => "original_author_id"
           "[retweeted_status][user][screen_name]" => "original_author_pseudo"
           "[retweeted_status][user][name]" => "original_author_name"
           "[retweeted_status][user][verified]" => "is_original_author_verified"
           "[retweeted_status][user][followers_count]" => "original_author_followers_count"
           "[retweeted_status][user][friends_count]" => "original_author_friends_count"
           "[retweeted_status][user][protected]" => "is_original_author_protected"
        }
        add_field => {
           "is_a_retweet" => true
        }
     }
     date {
        match => ["[retweeted_status][created_at]", "EEE MMM dd HH:mm:ss Z yyyy"]
        target => "original_tweet_created_at"
     }
     date {
        match => [ "[retweeted_status][user][created_at]", "EEE MMM dd HH:mm:ss Z yyyy" ]
        target => "original_author_account_creation"
     }
     ruby {
       code => '
         event.set("original_retweet_count", event.get("[retweeted_status][retweet_count]"))
         event.set("favorite_count", event.get("[retweeted_status][favorite_count]"))
         event.set("tweet_coordinates", event.get("[retweeted_status][coordinates][coordinates]")) if !event.get("[retweeted_status][coordinates][coordinates]").nil?
         event.set("original_reply_to_tweet", event.get("[retweeted_status][in_reply_to_status_id_str]")) if !event.get("[retweeted_status][in_reply_to_status_id_str]").nil?
         event.set("original_reply_to_user_id", event.get("[retweeted_status][in_reply_to_user_id_str]")) if !event.get("[retweeted_status][in_reply_to_user_id_str]").nil?
         event.set("original_reply_to_pseudo", event.get("[retweeted_status][in_reply_to_screen_name]")) if !event.get("[retweeted_status][in_reply_to_screen_name]").nil?
         event.set("original_author_location", event.get("[retweeted_status][user][location]")) if event.get("[retweeted_status][user][location]")
         event.set("original_author_description", event.get("[retweeted_status][user][description]")) if event.get("[retweeted_status][user][description]")
         event.set("original_author_lang", event.get("[retweeted_status][user][lang]")) if event.get("[retweeted_status][user][lang]")
       '
     }
  }
  else{
     mutate {
       add_field => {
          "tweet_content" => "%{[text]}"
          "is_a_retweet" => false
       }
     }
  }
  date {
     match => ["[created_at]", "EEE MMM dd HH:mm:ss Z yyyy"]
     target => "tweet_created_at"
  }
  date {
      match => [ "[user][created_at]", "EEE MMM dd HH:mm:ss Z yyyy" ]
      target => "author_account_creation"
  }
  ruby {
    code => '
      hashtags = []
      user_mentions_id = []
      user_mentions_pseudo = []
      urls = []
      event.get("[entities][hashtags]").each do |hashtag|
        hashtags << hashtag["text"].downcase
      end
      event.get("[entities][user_mentions]").each do |user_mention|
        user_mentions_id << user_mention["id_str"]
        user_mentions_pseudo << user_mention["screen_name"]
      end
      event.get("[entities][urls]").each do |url|
        urls << url["expanded_url"]
      end
      event.set("hashtags", hashtags) if hashtags.any?
      event.set("user_mentions_id", user_mentions_id) if user_mentions_id.any?
      event.set("user_mentions_pseudo", user_mentions_pseudo) if user_mentions_pseudo.any?
      event.set("urls", urls) if urls.any?
      event.set("tweet_lang", event.get("[lang]")) if event.get("[lang]")
      event.set("author_location", event.get("[user][location]")) if event.get("[user][location]")
      event.set("author_description", event.get("[user][description]")) if event.get("[user][description]")
      event.set("author_lang", event.get("[user][lang]")) if event.get("[user][lang]")
      event.set("tweet_coordinates", event.get("[coordinates][coordinates]")) if !event.get("[coordinates][coordinates]").nil?
      event.set("reply_to_tweet", event.get("[in_reply_to_status_id_str]")) if !event.get("[in_reply_to_status_id_str]").nil?
      event.set("reply_to_user_id", event.get("[in_reply_to_user_id_str]")) if !event.get("[in_reply_to_user_id_str]").nil?
      event.set("reply_to_pseudo", event.get("[in_reply_to_screen_name]")) if !event.get("[in_reply_to_screen_name]").nil?
    '
  }
  mutate {
     rename => {
       "[id_str]" =>  "tweet_id"
       "[user][id_str]" => "author_id"
       "[user][screen_name]" => "author_pseudo"
       "[user][name]" => "author_name"
       "[user][verified]" => "is_author_verified"
       "[user][followers_count]" => "author_followers_count"
       "[user][friends_count]" => "author_friends_count"
       "[user][protected]" => "is_author_protected"
     }
     add_field => {
       "processed_by_logstash_at" => "%{[@timestamp]}"
    }
  }
  #Uncomment if you are using an API that give you a sentiment and a score
  rest {
     request => {
         url => "http://sentiment:5000/predict"
         method => "post"
         params => {
            "submit" => "%{tweet_content}"
         }
         headers => { "Content-Type" => "application/json" }
     }
     target => 'rest'
  }
  mutate {
     rename => {
        "[rest][sentiment]" => "sentiment"
        "[rest][score]" => "sentiment_score"
    }
  }
  mutate {
     convert => {
        "[rest][sentiment_score]" => "float"
        "original_author_followers_count" => "integer"
        "original_author_friends_count" => "integer"
        "author_followers_count" => "integer"
        "author_friends_count" => "integer"
        #"is_author_protected" => "boolean"
        #"is_author_verified" => "boolean"
        #"is_a_retweet" => "boolean"
        #"is_original_author_verified" => "boolean"
        #"is_original_author_protected" => "boolean"
     }
  }
  mutate {
    rename => { "author_followers_count" => "[author][author_followers_count]" }
    rename => { "author_friends_count" => "[author][author_friends_count]" }
    rename => { "author_verified" => "[author][is_author_verified]" }
    rename => { "author_protected" => "[author][is_author_protected]" }
    rename => { "author_id" => "[author][author_id]" }
    rename => { "author_pseudo" => "[author][author_pseudo]" }
    rename => { "author_name" => "[author][author_name]" }
    rename => { "author_location" => "[author][author_location]" }
    rename => { "author_account_creation" => "[author][author_account_creation]" }
    rename => { "author_description" => "[author][author_description]" }
    rename => { "author_lang" => "[author][author_lang]" }
  }
  if ([original_author_id]) {
    mutate {
      rename => { "original_author_followers_count" => "[original_author][author_followers_count]" }
      rename => { "original_author_friends_count" => "[original_author][author_friends_count]" }
      rename => { "is_original_author_verified" => "[original_author][is_author_verified]" }
      rename => { "is_original_author_protected" => "[original_author][is_author_protected]" }
      rename => { "original_author_id" => "[original_author][author_id]" }
      rename => { "original_author_pseudo" => "[original_author][author_pseudo]" }
      rename => { "original_author_name" => "[original_author][author_name]" }
      rename => { "original_author_location" => "[original_author][author_location]" }
      rename => { "original_author_account_creation" => "[original_author][author_account_creation]" }
      rename => { "original_author_description" => "[original_author][author_description]" }
      rename => { "original_author_lang" => "[original_author][author_lang]" }
    }
  }
  mutate {
      remove_field => ["original_author_followers_count", "original_author_friends_count",
      "is_original_author_verified", "is_original_author_protected", "original_author_id",
      "original_author_pseudo", "original_author_name", "original_author_location",
      "original_author_account_creation", "original_author_description", "original_author_lang",
      "retweeted_status", "truncated", "user", "@version", "timestamp_ms",
      "is_quote_status", "extended_entities", "extended_tweet", "entities", "reply_count",
      "in_reply_to_status_id_str", "place", "display_text_range", "in_reply_to_user_id_str",
      "type", "author_followers_count", "author_friends_count", "quote_count", "reply_to_pseudo",
      "is_author_verified", "is_author_protected", "author_pseudo", "author_name",
      "author_location", "author_account_creation", "author_description", "author_lang",
      "rest", "author_id", "in_reply_to_screen_name", "in_reply_to_status_id",
      "in_reply_to_user_id", "lang", "original_reply_to_pseudo", "original_reply_to_tweet",
      "original_reply_to_user_id", "reply_to_pseudo", "reply_to_tweet", "reply_to_user_id",
      "text", "created_at", "coordinates"]
  }
}

output {
  elasticsearch {
    hosts => "elasticsearch:9200"
    sniffing => true
    #The index has to have the same name as the logstash template
    #manage_template => false
    index => "tweets-%{+YYYY.ww}"
    template => "/usr/share/logstash/template/twitterweekly.json"
    #index => "twitter"
    #template => "/usr/share/logstash/template/twitter.json"
    template_name => "twitter"
    template_overwrite => true
  }
}
